const core = require('@actions/core')
const main = require('../src/main')

const getInputMock = jest.spyOn(core, 'getInput').mockImplementation()
const setFailedMock = jest.spyOn(core, 'setFailed').mockImplementation()
const infoMock = jest.spyOn(core, 'info').mockImplementation()

const runMock = jest.spyOn(main, 'run')

describe('action', () => {
  beforeEach(() => {
    jest.clearAllMocks()
  })

  it('fails if format invalid', async () => {
    getInputMock.mockImplementation(name => {
      switch (name) {
        case 'format':
          return 'FooBar'
        default:
          return ''
      }
    })

    await main.run()

    expect(runMock).toHaveReturned()
    expect(setFailedMock).toHaveBeenNthCalledWith(
      1,
      'Report format FooBar is not supported.'
    )
  })

  it('fails with vulnerabilities on threshold level', async () => {
    getInputMock.mockImplementation(name => {
      switch (name) {
        case 'format':
          return 'AmazonInspector'
        case 'report-path':
          return '__tests__/reports/report-with-vulnerabilities-on-threshold.json'
        case 'threshold':
          return 'high'
        default:
          return ''
      }
    })

    await main.run()

    expect(runMock).toHaveReturned()
    expect(infoMock).toHaveBeenCalledWith('Vulnerability Level Count:')
    expect(infoMock).toHaveBeenCalledWith(
      '{"high":1,"critical":0,"low":0,"medium":0}'
    )
    expect(setFailedMock).toHaveBeenNthCalledWith(
      1,
      'Fail. One or more vulnerabilities violate threshold (1).'
    )
  })

  it('fails with vulnerabilities above threshold level', async () => {
    getInputMock.mockImplementation(name => {
      switch (name) {
        case 'format':
          return 'AmazonInspector'
        case 'report-path':
          return '__tests__/reports/report-with-vulnerabilities-above-threshold.json'
        case 'threshold':
          return 'high'
        default:
          return ''
      }
    })

    await main.run()

    expect(runMock).toHaveReturned()
    expect(infoMock).toHaveBeenCalledWith('Vulnerability Level Count:')
    expect(infoMock).toHaveBeenCalledWith(
      '{"high":0,"critical":1,"low":0,"medium":0}'
    )
    expect(setFailedMock).toHaveBeenNthCalledWith(
      1,
      'Fail. One or more vulnerabilities violate threshold (1).'
    )
  })

  it('passes with vulnerabilities below threshold level', async () => {
    getInputMock.mockImplementation(name => {
      switch (name) {
        case 'format':
          return 'AmazonInspector'
        case 'report-path':
          return '__tests__/reports/report-with-vulnerabilities-below-threshold.json'
        case 'threshold':
          return 'high'
        default:
          return ''
      }
    })

    await main.run()

    expect(runMock).toHaveReturned()
    expect(infoMock).toHaveBeenCalledWith('Vulnerability Level Count:')
    expect(infoMock).toHaveBeenCalledWith(
      '{"high":0,"critical":0,"low":2,"medium":1}'
    )
    expect(setFailedMock).toHaveBeenCalledTimes(0)
    expect(infoMock).toHaveBeenCalledWith(
      'Pass. No vulnerabilities violate given threshold and criteria.'
    )
  })
})
